{
  "version": 3,
  "sources": ["../i18n/translations.json", "../../../package.json", "../js/skiinfo.js"],
  "sourcesContent": ["{\n    \"Land\": {\n        \"en\": \"Country\",\n        \"de\": \"Land\",\n        \"ru\": \"\u0421\u0442\u0440\u0430\u043D\u0430\",\n        \"pt\": \"Pa\u00EDs\",\n        \"nl\": \"Land\",\n        \"fr\": \"Pays\",\n        \"it\": \"Paese\",\n        \"es\": \"Pa\u00EDs\",\n        \"pl\": \"Kraj\",\n        \"uk\": \"\u041A\u0440\u0430\u0457\u043D\u0430\",\n        \"zh-cn\": \"Country\"\n    },\n    \"Region\": {\n        \"en\": \"Region\",\n        \"de\": \"Region\",\n        \"ru\": \"\u0420\u0435\u0433\u0438\u043E\u043D\",\n        \"pt\": \"Regi\u00E3o\",\n        \"nl\": \"Regio\",\n        \"fr\": \"R\u00E9gion\",\n        \"it\": \"Regione\",\n        \"es\": \"Regi\u00F3n\",\n        \"pl\": \"Region\",\n        \"uk\": \"\u0420\u0435\u0433\u0456\u043E\u043D\",\n        \"zh-cn\": \"Region\"\n    },\n    \"Area\": {\n        \"en\": \"Area\",\n        \"de\": \"Gebiet\",\n        \"ru\": \"\u041E\u0431\u043B\u0430\u0441\u0442\u044C\",\n        \"pt\": \"\u00C1rea\",\n        \"nl\": \"Gebied\",\n        \"fr\": \"Zone\",\n        \"it\": \"Area\",\n        \"es\": \"Zona\",\n        \"pl\": \"Obszar\",\n        \"uk\": \"\u041F\u043B\u043E\u0449\u0430\",\n        \"zh-cn\": \"Area\"\n    },\n    \"Tal\": {\n        \"en\": \"Valley\",\n        \"de\": \"Tal\",\n        \"ru\": \"\u0414\u043E\u043B\u0438\u043D\u0430\",\n        \"pt\": \"Vale\",\n        \"nl\": \"Vallei\",\n        \"fr\": \"Vall\u00E9e\",\n        \"it\": \"Valle\",\n        \"es\": \"Valle\",\n        \"pl\": \"Dolina\",\n        \"uk\": \"\u0414\u043E\u043B\u0438\u043D\u0430\",\n        \"zh-cn\": \"Valley\"\n    },\n    \"Berg\": {\n        \"en\": \"Mountain\",\n        \"de\": \"Berg\",\n        \"ru\": \"\u0413\u043E\u0440\u0430\",\n        \"pt\": \"Montanha\",\n        \"nl\": \"Berg\",\n        \"fr\": \"Montagne\",\n        \"it\": \"Montagna\",\n        \"es\": \"Monta\u00F1a\",\n        \"pl\": \"G\u00F3ra\",\n        \"uk\": \"\u0413\u043E\u0440\u0430\",\n        \"zh-cn\": \"Mountain\"\n    },\n    \"Neu\": {\n        \"en\": \"Fresh\",\n        \"de\": \"Neuschnee\",\n        \"ru\": \"\u0421\u0432\u0435\u0436\u0438\u0435\",\n        \"pt\": \"Fresco\",\n        \"nl\": \"Vers\",\n        \"fr\": \"Frais\",\n        \"it\": \"Fresco\",\n        \"es\": \"Fresco\",\n        \"pl\": \"\u015Awie\u017Cy\",\n        \"uk\": \"\u0421\u0432\u0456\u0436\u0438\u0439\",\n        \"zh-cn\": \"Fresh\"\n    },\n    \"Lift\": {\n        \"en\": \"Lift\",\n        \"de\": \"Lift\",\n        \"ru\": \"\u041F\u043E\u0434\u044A\u0435\u043C\u043D\u0438\u043A\",\n        \"pt\": \"Elevador\",\n        \"nl\": \"Lift\",\n        \"fr\": \"Ascenseur\",\n        \"it\": \"Sollevare\",\n        \"es\": \"Ascensor\",\n        \"pl\": \"Podnoszenie\",\n        \"uk\": \"\u041F\u0456\u0434\u0439\u043E\u043C!\",\n        \"zh-cn\": \"Lift\"\n    },\n    \"von\": {\n        \"en\": \"date of\",\n        \"de\": \"Datum von\",\n        \"ru\": \"\u0434\u0430\u0442\u0430\",\n        \"pt\": \"data de\",\n        \"nl\": \"datum van\",\n        \"fr\": \"date de\",\n        \"it\": \"date of\",\n        \"es\": \"date of\",\n        \"pl\": \"data\",\n        \"uk\": \"\u0434\u0430\u0442\u0430\",\n        \"zh-cn\": \"date of\"\n    },\n    \"Suchbegriff\": {\n        \"en\": \"Search term\",\n        \"de\": \"Suchbegriff\",\n        \"ru\": \"\u041F\u043E\u0438\u0441\u043A\u043E\u0432\u044B\u0439 \u0442\u0435\u0440\u043C\u0438\u043D\",\n        \"pt\": \"Termo de pesquisa\",\n        \"nl\": \"Zoekterm\",\n        \"fr\": \"Terme de recherche\",\n        \"it\": \"Termine di ricerca\",\n        \"es\": \"T\u00E9rmino de b\u00FAsqueda\",\n        \"pl\": \"Wyszukiwane has\u0142o\",\n        \"uk\": \"\u041F\u043E\u0448\u0443\u043A\u043E\u0432\u0438\u0439 \u0437\u0430\u043F\u0438\u0442\",\n        \"zh-cn\": \"Search term\"\n    },\n    \"yyy\": {\n        \"en\": \"yyy\",\n        \"de\": \"yyy\",\n        \"ru\": \"yyy\",\n        \"pt\": \"yyy\",\n        \"nl\": \"yyy\",\n        \"fr\": \"aaa\",\n        \"it\": \"aaaa\",\n        \"es\": \"yyy\",\n        \"pl\": \"yyy\",\n        \"uk\": \"yyy\",\n        \"zh-cn\": \"yyy\"\n    }\n}\n", "{\n    \"name\": \"iobroker.skiinfo\",\n    \"version\": \"0.5.0\",\n    \"description\": \"skiinfo\",\n    \"author\": {\n        \"name\": \"oweitman\",\n        \"email\": \"oweitman@gmx.de\"\n    },\n    \"homepage\": \"https://github.com/oweitman/ioBroker.skiinfo\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"ioBroker\",\n        \"skiinfo\",\n        \"snow\",\n        \"winter\",\n        \"ski\"\n    ],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/oweitman/ioBroker.skiinfo.git\"\n    },\n    \"engines\": {\n        \"node\": \">=20.18.1\"\n    },\n    \"dependencies\": {\n        \"@iobroker/adapter-core\": \"^3.3.2\",\n        \"axios\": \"^1.12.2\",\n        \"cheerio\": \"^1.1.2\"\n    },\n    \"devDependencies\": {\n        \"@alcalzone/release-script\": \"^3.8.0\",\n        \"@alcalzone/release-script-plugin-iobroker\": \"^3.7.2\",\n        \"@alcalzone/release-script-plugin-license\": \"^3.7.0\",\n        \"@alcalzone/release-script-plugin-manual-review\": \"^3.7.0\",\n        \"@iobroker/adapter-dev\": \"^1.5.0\",\n        \"@iobroker/eslint-config\": \"^2.2.0\",\n        \"@iobroker/testing\": \"^5.1.1\",\n        \"@tsconfig/node20\": \"^20.1.6\",\n        \"@types/node\": \"^24.6.2\",\n        \"nyc\": \"^17.1.0\",\n        \"typescript\": \"~5.9.3\"\n    },\n    \"main\": \"main.js\",\n    \"files\": [\n        \"admin{,/!(src)/**}/!(tsconfig|tsconfig.*|eslint.config.mjs|prettier.config.mjs).{json,json5}\",\n        \"admin{,/!(src)/**}/*.{html,css,png,svg,jpg,js}\",\n        \"lib/\",\n        \"widgets/**/!(tsconfig|tsconfig.*|eslint.config.mjs|prettier.config.mjs).json\",\n        \"widgets/**/*.{html,css,png,svg,jpg,js}\",\n        \"www/\",\n        \"io-package.json\",\n        \"LICENSE\",\n        \"main.js\"\n    ],\n    \"scripts\": {\n        \"test:js\": \"mocha --config test/mocharc.custom.json \\\"{!(node_modules|test|widgets)/**/*.test.js,*.test.js,test/**/test!(PackageFiles|Startup).js}\\\"\",\n        \"test:package\": \"mocha test/package --exit\",\n        \"test:integration\": \"mocha test/integration --exit\",\n        \"test\": \"npm run test:js && npm run test:integration && npm run test:package\",\n        \"coverage\": \"nyc npm run test:js && nyc report --reporter=lcovonly\",\n        \"check\": \"tsc --noEmit -p tsconfig.check.json\",\n        \"lint\": \"eslint .\",\n        \"repochecker\": \"npx github:oweitman/ioBroker.repochecker https://github.com/oweitman/ioBroker.skiinfo --local --noinfo\",\n        \"translate\": \"translate-adapter\",\n        \"translate-widgets\": \"node ./bin/translate.js --source widgets/skiinfo/i18n/en.json --format single\",\n        \"build\": \"cd widgets/skiinfo && npm run build && cd ../..\",\n        \"release\": \"release-script --all\",\n        \"upload\": \"NPM_PACK=$(npm pack) && iob url \\\"$(pwd)/$NPM_PACK\\\" --debug && rm \\\"$NPM_PACK\\\"\"\n    },\n    \"bugs\": {\n        \"url\": \"https://github.com/oweitman/ioBroker.skiinfo/issues\"\n    },\n    \"readmeFilename\": \"README.md\"\n}\n", "/*\n    ioBroker.vis skiinfo Widget-Set\n\n    Copyright 2025 oweitman oweitman@gmx.de\n*/\n'use strict';\n\n// const { config } = require(\"chai\");\n\n/* global $, vis, systemDictionary,_ */\n\nimport { version as pkgVersion } from '../../../package.json';\nvar translations = require('../i18n/translations.json');\n$.extend(true, systemDictionary, translations);\n\n// this code can be placed directly in skiinfo.html\nvis.binds['skiinfo'] = {\n    version: pkgVersion,\n    debug: true,\n    showVersion: function () {\n        if (vis.binds['skiinfo'].version) {\n            console.log(`Version skiinfo: ${vis.binds['skiinfo'].version}`);\n            vis.binds['skiinfo'].version = null;\n        }\n    },\n    data: null,\n    sortarrows: {\n        0: '&nbsp;',\n        1: '&darr;',\n        2: '&uarr;',\n    },\n    browser: {\n        /**\n         * Asynchronously creates a widget for the specified widget ID, view, data, and style.\n         * If the widget element is not found, the function retries after a delay.\n         * Loads instance and skiinfo_oid information, initializes necessary data structures,\n         * retrieves ski data if not already available, and sets the selected country.\n         * Finally, it renders the widget.\n         *\n         * @param widgetID - The ID of the widget to create.\n         * @param view - The view in which the widget is being created.\n         * @param data - Data object containing skiinfo_oid and other relevant information.\n         * @param style - The style to apply to the widget.\n         */\n        createWidget: async function (widgetID, view, data, style) {\n            var $div = $(`#${widgetID}`);\n            // if nothing found => wait\n            if (!$div.length) {\n                return setTimeout(function () {\n                    vis.binds['skiinfo'].browser.createWidget(widgetID, view, data, style);\n                }, 100);\n            }\n            this.visSkiinfo = vis.binds['skiinfo'];\n            if (!data.skiinfo_oid || data.skiinfo_oid == '') {\n                return;\n            }\n            let [instance, skiinfo_oid] = this.visSkiinfo.getInstanceInfo(data.skiinfo_oid);\n            if (!skiinfo_oid && !instance) {\n                return;\n            }\n\n            this.visSkiinfo.debug && console.log('Load Data');\n            if (!this.visSkiinfo[instance]) {\n                this.visSkiinfo[instance] = {\n                    data: null,\n                };\n            }\n            if (!this.visSkiinfo[widgetID]) {\n                this.visSkiinfo[widgetID] = {\n                    // 0=default,1=asc,2=desc\n                    sortState: {\n                        thname: 0,\n                        thvalley: 0,\n                        thmountain: 0,\n                        thnew: 0,\n                        thlift: 0,\n                        thupdate: 0,\n                    },\n                    filter: false,\n                };\n            }\n            this.visSkiinfo[widgetID].wdata = data;\n            this.visSkiinfo[widgetID].instance = instance;\n            if (!this.visSkiinfo[instance].data) {\n                this.visSkiinfo[instance].data = await this.visSkiinfo.getServerSkiData(instance);\n                if (!this.visSkiinfo[instance].data.favorites) {\n                    this.visSkiinfo[instance].data.favorites = [];\n                }\n            }\n            if (!this.visSkiinfo[widgetID].selectedCountry) {\n                await this.setSelectedCountry(widgetID);\n            }\n            this.render(widgetID);\n        },\n        /**\n         * Renders the skiinfo widget for the specified widget ID.\n         * Constructs the HTML structure and style, including tables for countries, regions, and areas.\n         * Adds click event handlers to elements for interactivity.\n         *\n         * @param widgetID - The ID of the widget to render.\n         */\n        async render(widgetID) {\n            this.visSkiinfo.debug && console.log(`render browser`);\n            let instance = this.visSkiinfo[widgetID].instance;\n            let favoritecolor = this.visSkiinfo[widgetID].wdata.favoritecolor || 'red';\n            let text = '';\n            text += `<style>`;\n            text += `.skiinfo.${widgetID}.container {\\n`;\n            text += '   display: flex; \\n';\n            text += '   height: 100%; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID} .icon {\\n`;\n            text += '   line-height: 1em; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.flexcontainer {\\n`;\n            text += '   overflow: auto; \\n';\n            text += '   scrollbar-width: thin; \\n';\n            text += '   margin: 0px 0px 0px 2px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.countries {\\n`;\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.countries.scroll {\\n`;\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID} ul {\\n`;\n            text += '   list-style-type: none; \\n';\n            text += '   padding: 0px; \\n';\n            text += '   margin: 0px; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID} li {\\n`;\n            text += '   border: solid 1px;\\n';\n            text += '   border-color: currentcolor;\\n';\n            text += '   padding: 2px 8px;\\n';\n            text += '   margin: 2px 0px;\\n';\n            text += '   cursor: pointer;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.regions {\\n`;\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.regions.scroll {\\n`;\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.regions li.selected {\\n`;\n            text += '   font-weight: bold; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .favorite {\\n`;\n            text += '   cursor: pointer;\\n';\n            text += '   padding-right: 5px; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.countries .filter {\\n`;\n            text += '   cursor: pointer;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.areas .tharea {\\n`;\n            text += '   cursor: pointer;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.areas .tharea.thname {\\n`;\n            text += '   text-align: left;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .tharea .thcontent {\\n`;\n            text += '   display: flex;\\n';\n            text += '   justify-content: space-between;\\n';\n            text += '   align-items: center;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .tharea .thcontent span{\\n`;\n            text += '   flex: 0 0 auto;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .tharea .thcontent span:first-child{\\n`;\n            text += '   flex: 1;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.countries .thcountries.thname {\\n`;\n            text += '   text-align: left;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.countries .thcountries .thcontent {\\n`;\n            text += '   display: flex;\\n';\n            text += '   justify-content: space-between;\\n';\n            text += '   align-items: center;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.countries .thcountries .thcontent span{\\n`;\n            text += '   flex: 0 0 auto;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.countries .thcountries .thcontent span:first-child{\\n`;\n            text += '   flex: 1;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.areas .tharea .thsearchcontent {\\n`;\n            text += '   position: relative;\\n';\n            text += '   width: 100%;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .tharea .thsearchcontent .thinput {\\n`;\n            text += '   width: 100%;\\n';\n            text += '   box-sizing: border-box;\\n';\n            text += '   padding-right: 24px;\\n';\n            text += '   color: currentColor;\\n';\n            text += '   background-color: transparent;\\n';\n            text += '   border-style: solid;\\n';\n            text += '   border-width: 1px;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .tharea .thsearchcontent .searchclose {\\n`;\n            text += '   position: absolute;\\n';\n            text += '   right: 8px;\\n';\n            text += '   top: 50%;\\n';\n            text += '   transform: translateY(-50%);\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.areas .favorite.selected {\\n`;\n            text += `   color: ${favoritecolor}; \\n`;\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.countries .icon.filter.selected {\\n`;\n            text += `   color: ${favoritecolor}; \\n`;\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table {\\n`;\n            text += '   white-space: nowrap; \\n';\n            text += '   border-collapse: separate; \\n';\n            text += '   border-spacing: 0px 2px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table tr {\\n`;\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td, .skiinfo.${widgetID} table th {\\n`;\n            text += '   padding: 2px 8px; \\n';\n            text += '   border: solid 1px currentcolor; \\n';\n            text += '   border-left-width: 0px; \\n';\n            text += '   border-right-width: 0px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} th {\\n`;\n            text += '   text-align: left; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} td span.selected {\\n`;\n            text += '   font-weight: bold; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID} table td.txtr {\\n`;\n            text += '   text-align: right;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td.txtl {\\n`;\n            text += '   text-align: left;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.countries table td, .skiinfo.${widgetID}.regions table td {\\n`;\n            text += '   cursor: pointer;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td:first-child, .skiinfo.${widgetID} table th:first-child {\\n`;\n            text += '   border-left-width: 1px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td:last-child, .skiinfo.${widgetID} table th:last-child {\\n`;\n            text += '   border-right-width: 1px; \\n';\n            text += '   padding-right: 7px; \\n';\n            text += '} \\n';\n            text += `</style>`;\n            text += `<div class=\"skiinfo ${widgetID} container\">`;\n            text += ` <div class=\"skiinfo ${widgetID} flexcontainer countries\">`;\n            text += `  <table>`;\n            text += `   <tr>`;\n            text += `    <th class=\"thcountries thname\" data-widgetid=\"${widgetID}\"><div class=\"thcontent\"><span>${_('Land')}</span><span class=\"icon filter ${this.visSkiinfo[widgetID].filter ? 'selected' : ''}\">&#x1F7CA;</span></div></th>`;\n\n            text += `   </tr>`;\n            let countries = this.visSkiinfo[instance].data.skiinfodata;\n            countries.map(country => {\n                let selected = country.code == this.visSkiinfo[widgetID].selectedCountry;\n\n                let visible =\n                    this.visSkiinfo[instance].data.favorites.findIndex(item => item.country == country.code) == -1\n                        ? false\n                        : true;\n\n                if (this.visSkiinfo[widgetID].filter && !visible) {\n                    return;\n                }\n                text += `   <tr>`;\n                text += `    <td><span \n                 data-code=\"${country.code}\" \n                 data-widgetid=\"${widgetID}\" \n                 ${selected ? 'class=\"selected\"' : ''}\n                >${country.name}</span></td>`;\n                text += `   </tr>`;\n            });\n            text += `  </table>`;\n            text += ` </div>`;\n            text += ` <div class=\"skiinfo ${widgetID} flexcontainer regions\">`;\n            text += `  <table>`;\n            text += `   <tr>`;\n            text += `    <th>${_('Region')}</th>`;\n            text += `   </tr>`;\n            let country = countries.find(c => c.code == this.visSkiinfo[widgetID].selectedCountry);\n            country.regions.map(region => {\n                let selected = region.code == this.visSkiinfo[widgetID].selectedRegion;\n\n                let visible =\n                    this.visSkiinfo[instance].data.favorites.findIndex(\n                        item => item.country == this.visSkiinfo[widgetID].selectedCountry && item.region == region.code,\n                    ) == -1\n                        ? false\n                        : true;\n\n                if (this.visSkiinfo[widgetID].filter && !visible) {\n                    return;\n                }\n                text += `   <tr>`;\n                text += `    <td><span  \n                 data-code=\"${region.code}\" \n                 data-widgetid=\"${widgetID}\" \n                 data-country=\"${this.visSkiinfo[widgetID].selectedCountry}\" \n                 ${selected ? 'class=\"selected\"' : ''}\n                >${region.name}</span></td>`;\n                text += `   </tr>`;\n            });\n            text += `  </table>`;\n            text += ` </div>`;\n\n            text += ` <div class=\"skiinfo ${widgetID} flexcontainer areas\">`;\n            text += `  <table>`;\n            text += `   <tr>`;\n            if (this.visSkiinfo[widgetID].search !== undefined) {\n                text += `    <th class=\"thsort tharea thname\" data-widgetid=\"${widgetID}\" data-sort=\"thname\"><div class=\"thsearchcontent\"><input type=\"text\" placeholder=\"${_('Suchbegriff')}\" value=\"${this.visSkiinfo[widgetID].search}\" autofocus=\"autofocus\" class=\"thinput\" /><span class=\"icon searchclose\">&times;</span></div></th>`;\n            } else {\n                text += `    <th class=\"thsort tharea thname\" data-widgetid=\"${widgetID}\" data-sort=\"thname\"><div class=\"thcontent\"><span>${_('Area')}</span><span class=\"icon sort\">${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thname']]}</span> <span class=\"icon search\">&#x1F50E;&#xFE0E;</span></div></th>`;\n            }\n            text += `    <th class=\"thsort tharea\"        data-widgetid=\"${widgetID}\" data-sort=\"thvalley\">${_('Tal')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thvalley']]}</th>`;\n            text += `    <th class=\"thsort tharea\"        data-widgetid=\"${widgetID}\" data-sort=\"thmountain\">${_('Berg')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thmountain']]}</th>`;\n            text += `    <th class=\"thsort tharea\"        data-widgetid=\"${widgetID}\" data-sort=\"thnew\">${_('Neu')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thnew']]}</th>`;\n            text += `    <th class=\"thsort tharea\"        data-widgetid=\"${widgetID}\" data-sort=\"thlift\">${_('Lift')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thlift']]}</th>`;\n            text += `    <th class=\"thsort tharea\"        data-widgetid=\"${widgetID}\" data-sort=\"thupdate\">${_('von')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thupdate']]}</th>`;\n            text += `   </tr>`;\n\n            let sortkey = '';\n            let sortdir = 0;\n            for (const item in this.visSkiinfo[widgetID].sortState) {\n                if (this.visSkiinfo[widgetID].sortState[item] > 0) {\n                    sortkey = item;\n                    sortdir = this.visSkiinfo[widgetID].sortState[item];\n                }\n            }\n            /**\n             * Compares two objects based on a specified sort key and direction.\n             * The comparison is performed according to the type associated with the sort key,\n             * which can be 'string', 'number', or 'date'. If the sort key is 'thlift', a ratio\n             * of liftsAll to liftsOpen is used for comparison. The function returns a negative\n             * number if the first object should be sorted before the second, a positive number\n             * if the first object should be sorted after the second, and zero if they are equal.\n             *\n             * @param a - The first object to compare.\n             * @param b - The second object to compare.\n             * @returns - A negative, positive, or zero value based on comparison.\n             */\n            const compareFn = (a, b) => {\n                let valA, valB, compareType;\n                switch (sortkey) {\n                    case 'thname':\n                        compareType = 'string';\n                        valA = a.name;\n                        valB = b.name;\n                        break;\n                    case 'thvalley':\n                        compareType = 'number';\n                        valA = a.snowValley;\n                        valB = b.snowValley;\n                        break;\n                    case 'thmountain':\n                        compareType = 'number';\n                        valA = a.snowMountain;\n                        valB = b.snowMountain;\n                        break;\n                    case 'thnew':\n                        compareType = 'number';\n                        valA = a.freshSnow;\n                        valB = b.freshSnow;\n                        break;\n                    case 'thlift':\n                        compareType = 'number';\n                        if (a.liftsAll == 0) {\n                            valA = Infinity;\n                        } else {\n                            valA = a.liftsAll / a.liftsOpen;\n                        }\n                        if (b.liftsAll == 0) {\n                            valB = Infinity;\n                        } else {\n                            valB = b.liftsAll / b.liftsOpen;\n                        }\n                        [valA, valB] = [valB, valA];\n                        break;\n                    case 'thupdate':\n                        compareType = 'date';\n                        valA = a.lastUpdate;\n                        valB = b.lastUpdate;\n                        break;\n                    default:\n                        compareType = 'nosort';\n                        break;\n                }\n                switch (sortdir) {\n                    case 1:\n                        [valA, valB] = [valB, valA];\n                        break;\n                    case 2:\n                        break;\n                    default:\n                        break;\n                }\n                switch (compareType) {\n                    case 'string':\n                        return valA.localeCompare(valB);\n                    case 'number':\n                        return valA - valB;\n                    case 'date':\n                        return new Date(valA).getTime() - new Date(valB).getTime();\n                    default:\n                        return 0;\n                }\n            };\n\n            country.areas\n                .filter(area => {\n                    let testregion = area.region == this.visSkiinfo[widgetID].selectedRegion;\n                    let testname =\n                        this.visSkiinfo[widgetID].search !== undefined\n                            ? area.name.toLowerCase().includes(this.visSkiinfo[widgetID].search.toLowerCase())\n                            : true;\n                    return testregion && testname;\n                })\n                .sort(compareFn)\n                .map(area => {\n                    let selected =\n                        this.visSkiinfo[instance].data.favorites.findIndex(\n                            item => item.country == this.visSkiinfo[widgetID].selectedCountry && item.area == area.code,\n                        ) == -1\n                            ? false\n                            : true;\n                    if (this.visSkiinfo[widgetID].filter && !selected) {\n                        return;\n                    }\n                    text += `   <tr>`;\n                    text += `    <td class=\"txtl\"><span class=\"icon favorite ${selected ? 'selected' : ''}\"  data-widgetid=\"${widgetID}\" data-country=\"${area.country}\" data-region=\"${area.region}\" data-area=\"${area.code}\">&#x1F7CA;</span>${area.name} &nbsp;</td>`;\n                    text += `    <td class=\"txtr\">${area.snowValley} &nbsp;</td>`;\n                    text += `    <td class=\"txtr\">${area.snowMountain} &nbsp;</td>`;\n                    text += `    <td class=\"txtr\">${area.freshSnow} &nbsp;</td>`;\n                    text += `    <td class=\"txtr\">${area.liftsOpen}/${area.liftsAll} &nbsp;</td>`;\n                    text += `    <td class=\"txtl\">${area.lastUpdate} &nbsp;</td>`;\n                    text += `   </tr>`;\n                });\n            text += `  </table>`;\n            text += ` </div>`;\n            text += `</div>`;\n\n            $(`#${widgetID}`).html(text);\n            $(`.skiinfo.${widgetID}.countries td span`).on('click', async function () {\n                await vis.binds['skiinfo'].browser.onClickCountry(this);\n            });\n            $(`.skiinfo.${widgetID}.regions td span`).on('click', async function () {\n                await vis.binds['skiinfo'].browser.onClickRegion(this);\n            });\n            $(`.skiinfo.${widgetID} .tharea`).on('click', async function () {\n                await vis.binds['skiinfo'].browser.onClickHeadArea(this);\n            });\n            $(`.skiinfo.${widgetID} .tharea.thname .icon.search`).on('click', async function () {\n                await vis.binds['skiinfo'].browser.onClickSearchArea(this);\n            });\n\n            $(`.skiinfo.${widgetID}.areas .favorite`).on('click', async function () {\n                await vis.binds['skiinfo'].browser.onClickFavorite(this);\n            });\n            $(`.skiinfo.${widgetID} .thcountries.thname .icon.filter`).on('click', async function () {\n                vis.binds['skiinfo'].browser.onClickCountriesFilter(this);\n            });\n\n            if (this.visSkiinfo[widgetID].search !== undefined) {\n                $(`.skiinfo.${widgetID} .tharea.thname .icon.searchclose`).on('click', async function () {\n                    await vis.binds['skiinfo'].browser.onClickSearchClose(this);\n                });\n                $(`.skiinfo.${widgetID} .tharea.thname .thinput`).on('change', async function () {\n                    await vis.binds['skiinfo'].browser.onClickDoSearch(this);\n                });\n                $(`.skiinfo.${widgetID} .tharea.thname .thinput`).focus();\n            }\n        },\n        /**\n         * Event handler for clicking on a country.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function sets the selected country to the one that was clicked\n         * and then calls the render function to update the widget.\n         */\n        onClickCountry: async function (el) {\n            let code = $(el).attr('data-code');\n            let widgetID = $(el).attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickCountry ${widgetID} ${code}`);\n            await this.setSelectedCountry(widgetID, code);\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on a region.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function sets the selected region to the one that was clicked\n         * and then calls the render function to update the widget.\n         */\n        onClickRegion: async function (el) {\n            let code = $(el).attr('data-code');\n            let countrycode = $(el).attr('data-country');\n            let widgetID = $(el).attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickRegion ${widgetID} ${countrycode} ${code}`);\n            await this.setSelectedRegion(widgetID, countrycode, code);\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on a table header in the area list.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function toggles the sort order of the area list by the sort key\n         * that was clicked and then calls the render function to update the\n         * widget.\n         */\n        onClickHeadArea: async function (el) {\n            let sortkey = $(el).attr('data-sort');\n            let widgetID = $(el).attr('data-widgetid');\n            if (vis.binds['skiinfo'][widgetID].search !== undefined) {\n                return;\n            }\n            this.visSkiinfo.debug && console.log(`onClickHeadArea ${widgetID} ${sortkey}`);\n            vis.binds['skiinfo'].toggleSort(widgetID, sortkey);\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on the search icon in the area list.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function enables the search bar and then calls the render function to update the widget.\n         */\n        onClickSearchArea: async function (el) {\n            let widgetID = $(el).parent().parent().attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickSearchArea ${widgetID}`);\n            vis.binds['skiinfo'].enableSearch(widgetID);\n            this.render(widgetID);\n        },\n        onClickCountriesFilter: async function (el) {\n            let widgetID = $(el).parent().parent().attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickCountriesFilter ${widgetID}`);\n            vis.binds['skiinfo'].toggleFilter(widgetID);\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on the close icon in the search bar.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function disables the search bar and then calls the render function to update the widget.\n         */\n        onClickSearchClose: async function (el) {\n            let widgetID = $(el).parent().parent().attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickSearchClose ${widgetID}`);\n            vis.binds['skiinfo'].disableSearch(widgetID);\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on the search button in the search bar.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function calls the doSearch function to update the search and then calls the render\n         * function to update the widget.\n         */\n        onClickDoSearch: async function (el) {\n            let widgetID = $(el).parent().parent().attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickDoSearch ${widgetID}`);\n            vis.binds['skiinfo'].doSearch(widgetID, $(el).val());\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on a favorite icon.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function toggles the favorite status of the clicked area and then\n         * calls the render function to update the widget.\n         */\n        onClickFavorite: async function (el) {\n            let widgetID = $(el).attr('data-widgetid');\n            let instance = this.visSkiinfo[widgetID].instance;\n            let country = $(el).attr('data-country');\n            let region = $(el).attr('data-region');\n            let area = $(el).attr('data-area');\n            if (!this.visSkiinfo[instance].data.favorites) {\n                this.visSkiinfo[instance].data.favorites = [];\n            }\n            let index = this.visSkiinfo[instance].data.favorites.findIndex(\n                item => item.country == country && item.area == area,\n            );\n            if (index !== -1) {\n                this.visSkiinfo.debug && console.log(`onClickFavorite ${widgetID} ${country} ${area} fav deleted`);\n                this.visSkiinfo[instance].data = await this.visSkiinfo.delServerFavorite(\n                    this.visSkiinfo[widgetID].instance,\n                    country,\n                    region,\n                    area,\n                );\n            } else {\n                this.visSkiinfo.debug && console.log(`onClickFavorite ${widgetID} ${country} ${area} fav added`);\n                this.visSkiinfo[instance].data = await this.visSkiinfo.addServerFavorite(\n                    this.visSkiinfo[widgetID].instance,\n                    country,\n                    region,\n                    area,\n                );\n            }\n            this.render(widgetID);\n        },\n        /**\n         * Sets the selected country of the widget to the given country code.\n         *\n         * If the country code is not given, the first country in the list is selected.\n         *\n         * This function also sets the selected region to the first region of the selected country.\n         *\n         * @param widgetID The ID of the widget for which the selected country is changed.\n         * @param countrycode The code of the country to select.\n         * @returns Promise\n         */\n        setSelectedCountry: async function (widgetID, countrycode) {\n            let instance = this.visSkiinfo[widgetID].instance;\n            this.visSkiinfo.debug && console.log(`setSelectedCountry ${widgetID} ${countrycode}`);\n            if (countrycode) {\n                this.visSkiinfo[widgetID].selectedCountry = countrycode;\n                let country = this.visSkiinfo[instance].data.skiinfodata.find(country => country.code == countrycode);\n\n                if (!country || country.loaded == false) {\n                    this.visSkiinfo[instance].data = await this.visSkiinfo.getServerCountryData(\n                        this.visSkiinfo[widgetID].instance,\n                        this.visSkiinfo[widgetID].selectedCountry,\n                    );\n                }\n                this.visSkiinfo[widgetID].selectedRegion = country.regions[0].code;\n            } else {\n                this.visSkiinfo[widgetID].selectedCountry = this.visSkiinfo[instance].data.skiinfodata[0].code;\n                this.visSkiinfo[widgetID].selectedRegion =\n                    this.visSkiinfo[instance].data.skiinfodata[0].regions[0].code;\n            }\n        },\n        /**\n         * Sets the selected region of the widget to the given region code.\n         *\n         * If the country code is not given, the currently selected country is used.\n         *\n         * If the region code is not given, the first region of the selected country is selected.\n         *\n         * This function also sets the selected country if the given country code is not the same as the currently selected country.\n         *\n         * @param widgetID The ID of the widget for which the selected region is changed.\n         * @param countrycode The code of the country which the region belongs to.\n         * @param regioncode The code of the region to select.\n         * @returns Promise\n         */\n        setSelectedRegion: async function (widgetID, countrycode, regioncode) {\n            let country, region;\n            let instance = this.visSkiinfo[widgetID].instance;\n            this.visSkiinfo.debug && console.log(`setSelectedRegion ${widgetID} ${countrycode} ${regioncode}`);\n            if (countrycode) {\n                country = this.visSkiinfo[instance].data.skiinfodata.find(country => country.code == countrycode);\n\n                if (!country || country.loaded == false) {\n                    this.visSkiinfo[instance].data = await this.visSkiinfo.getServerCountryData(\n                        this.visSkiinfo[widgetID].instance,\n                        this.visSkiinfo[widgetID].selectedCountry,\n                    );\n                }\n            } else {\n                this.visSkiinfo[widgetID].selectedCountry = this.visSkiinfo[instance].data.skiinfodata[0].code;\n            }\n            country = this.visSkiinfo[instance].data.skiinfodata.find(country => country.code == countrycode);\n            if (regioncode) {\n                this.visSkiinfo[widgetID].selectedRegion = regioncode;\n\n                region = country.regions.find(region => region.code == regioncode);\n\n                if (!region || region.loaded == false) {\n                    this.visSkiinfo[instance].data = await this.visSkiinfo.getServerRegionData(\n                        this.visSkiinfo[widgetID].instance,\n                        this.visSkiinfo[widgetID].selectedCountry,\n                        this.visSkiinfo[widgetID].selectedRegion,\n                    );\n                }\n            } else {\n                this.visSkiinfo[widgetID].selectedRegion = country.regions[0].code;\n            }\n        },\n    },\n    favorites: {\n        /**\n         * Creates a widget for the specified widget ID, view, data, and style.\n         * If the widget element is not found, the function retries after a delay.\n         * Loads instance and skiinfo_oid information, initializes necessary data structures,\n         * retrieves ski data if not already available, and sets the selected country.\n         * Finally, it renders the widget.\n         *\n         * @param widgetID - The ID of the widget to create.\n         * @param view - The view in which the widget is being created.\n         * @param data - Data object containing skiinfo_oid and other relevant information.\n         * @param style - The style to apply to the widget.\n         */\n        createWidget: async function (widgetID, view, data, style) {\n            var $div = $(`#${widgetID}`);\n            // if nothing found => wait\n            if (!$div.length) {\n                return setTimeout(function () {\n                    vis.binds['skiinfo'].favorites.createWidget(widgetID, view, data, style);\n                }, 100);\n            }\n            this.visSkiinfo = vis.binds['skiinfo'];\n            if (!data.skiinfo_oid || data.skiinfo_oid == '') {\n                return;\n            }\n            let [instance, skiinfo_oid] = this.visSkiinfo.getInstanceInfo(data.skiinfo_oid);\n            if (!skiinfo_oid && !instance) {\n                return;\n            }\n            if (!this.visSkiinfo[widgetID]) {\n                this.visSkiinfo[widgetID] = {\n                    // 0=default,1=asc,2=desc\n                    sortState: {\n                        thname: 0,\n                        thvalley: 0,\n                        thmountain: 0,\n                        thnew: 0,\n                        thlift: 0,\n                        thupdate: 0,\n                    },\n                };\n            }\n            this.visSkiinfo[widgetID].wdata = data;\n            this.visSkiinfo[widgetID].instance = instance;\n            if (!this.visSkiinfo[instance].data) {\n                this.visSkiinfo[instance].data = await this.visSkiinfo.getServerSkiData(instance);\n                if (!this.visSkiinfo[instance].data.favorites) {\n                    this.visSkiinfo[instance].data.favorites = [];\n                }\n            }\n            let config = data['skiinfo_oid'] ? JSON.parse(vis.states.attr(`${data['skiinfo_oid']}.val`)) : [];\n\n            this.visSkiinfo[instance].data.favorites = config.favorites || [];\n\n            /**\n             * called when the bound state changes\n             *\n             * @param e jquery event\n             * @param newVal the new value of the bound state as string\n             * param [oldVal] the old value of the bound state as string\n             */\n            function onChange(e, newVal /* , oldVal */) {\n                vis.binds['skiinfo'][instance].data.favorites = JSON.parse(newVal).favorites;\n                vis.binds['skiinfo'].favorites.render(widgetID);\n            }\n            if (data.skiinfo_oid) {\n                vis.states.bind(`${data.skiinfo_oid}.val`, onChange);\n                //remember bound state that vis can release if didnt needed\n                $div.data('bound', [`${data.skiinfo_oid}.val`]);\n                //remember onchange handler to release bound states\n                $div.data('bindHandler', onChange);\n            }\n            this.render(widgetID);\n        },\n        /**\n         * renders the skiinfo widget for the specified widget ID\n         * constructs the HTML structure and style, including tables for countries, regions, and areas\n         * adds click event handlers to elements for interactivity\n         *\n         * @param widgetID - The ID of the widget to render.\n         */\n        async render(widgetID) {\n            this.visSkiinfo.debug && console.log(`favorites render ${widgetID}`);\n            let instance = this.visSkiinfo[widgetID].instance;\n            let favoritecolor = this.visSkiinfo[widgetID].wdata.favoritecolor || 'red';\n            let text = '';\n            text += `<style>`;\n            text += `.skiinfo.${widgetID}.container {\\n`;\n            text += '   display: flex; \\n';\n            text += '   height: 100%; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.flexcontainer {\\n`;\n            text += '   overflow: auto; \\n';\n            text += '   scrollbar-width: thin; \\n';\n            text += '   margin: 0px 0px 0px 2px; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID}.areas .favorite {\\n`;\n            text += '   cursor: pointer;\\n';\n            text += '   padding-right: 5px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .tharea {\\n`;\n            text += '   cursor: pointer;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID}.areas .favorite.selected {\\n`;\n            text += `   color: ${favoritecolor}; \\n`;\n\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table {\\n`;\n            text += '   white-space: nowrap; \\n';\n            text += '   border-collapse: separate; \\n';\n            text += '   border-spacing: 0px 2px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table tr {\\n`;\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td, .skiinfo.${widgetID} table th {\\n`;\n            text += '   padding: 2px 8px; \\n';\n            text += '   border: solid 1px currentcolor; \\n';\n            text += '   border-left-width: 0px; \\n';\n            text += '   border-right-width: 0px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} th {\\n`;\n            text += '   text-align: left; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} td.selected {\\n`;\n            text += '   font-weight: bold; \\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID} table td.txtr {\\n`;\n            text += '   text-align: right;\\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td.txtl {\\n`;\n            text += '   text-align: left;\\n';\n            text += '} \\n';\n\n            text += `.skiinfo.${widgetID} table td:first-child, .skiinfo.${widgetID} table th:first-child {\\n`;\n            text += '   border-left-width: 1px; \\n';\n            text += '} \\n';\n            text += `.skiinfo.${widgetID} table td:last-child, .skiinfo.${widgetID} table th:last-child {\\n`;\n            text += '   border-right-width: 1px; \\n';\n            text += '   padding-right: 7px; \\n';\n            text += '} \\n';\n            text += `</style>`;\n\n            text += `<div class=\"skiinfo ${widgetID} container\">`;\n            text += ` <div class=\"skiinfo ${widgetID} flexcontainer areas\">`;\n\n            text += `  <table>`;\n            text += `   <tr>`;\n            text += `    <th class=\"thsort tharea\" data-widgetid=\"${widgetID}\" data-sort=\"thname\">${_('Area')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thname']]}</th>`;\n            text += `    <th class=\"thsort tharea\" data-widgetid=\"${widgetID}\" data-sort=\"thvalley\">${_('Tal')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thvalley']]}</th>`;\n            text += `    <th class=\"thsort tharea\" data-widgetid=\"${widgetID}\" data-sort=\"thmountain\">${_('Berg')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thmountain']]}</th>`;\n            text += `    <th class=\"thsort tharea\" data-widgetid=\"${widgetID}\" data-sort=\"thnew\">${_('Neu')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thnew']]}</th>`;\n            text += `    <th class=\"thsort tharea\" data-widgetid=\"${widgetID}\" data-sort=\"thlift\">${_('Lift')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thlift']]}</th>`;\n            text += `    <th class=\"thsort tharea\" data-widgetid=\"${widgetID}\" data-sort=\"thupdate\">${_('von')} ${this.visSkiinfo.sortarrows[this.visSkiinfo[widgetID].sortState['thupdate']]}</th>`;\n            text += `   </tr>`;\n\n            let sortkey = '';\n            let sortdir = 0;\n            for (const item in this.visSkiinfo[widgetID].sortState) {\n                if (this.visSkiinfo[widgetID].sortState[item] > 0) {\n                    sortkey = item;\n                    sortdir = this.visSkiinfo[widgetID].sortState[item];\n                }\n            }\n            /**\n             * Function to compare two objects based on the current sort key and sort direction.\n             *\n             * @param a - first object to compare\n             * @param b - second object to compare\n             * @returns - positive if a should be sorted before b, negative if a should be sorted after b, 0 if a and b are equal\n             */\n            const compareFn = (a, b) => {\n                let valA, valB, compareType;\n                switch (sortkey) {\n                    case 'thname':\n                        compareType = 'string';\n                        valA = a.name;\n                        valB = b.name;\n                        break;\n                    case 'thvalley':\n                        compareType = 'number';\n                        valA = a.snowValley;\n                        valB = b.snowValley;\n                        break;\n                    case 'thmountain':\n                        compareType = 'number';\n                        valA = a.snowMountain;\n                        valB = b.snowMountain;\n                        break;\n                    case 'thnew':\n                        compareType = 'number';\n                        valA = a.freshSnow;\n                        valB = b.freshSnow;\n                        break;\n                    case 'thlift':\n                        compareType = 'number';\n                        if (a.liftsAll == 0) {\n                            valA = Infinity;\n                        } else {\n                            valA = a.liftsAll / a.liftsOpen;\n                        }\n                        if (b.liftsAll == 0) {\n                            valB = Infinity;\n                        } else {\n                            valB = b.liftsAll / b.liftsOpen;\n                        }\n                        [valA, valB] = [valB, valA];\n                        break;\n                    case 'thupdate':\n                        compareType = 'date';\n                        valA = a.lastUpdate;\n                        valB = b.lastUpdate;\n                        break;\n                    default:\n                        compareType = 'nosort';\n                        break;\n                }\n                switch (sortdir) {\n                    case 1:\n                        [valA, valB] = [valB, valA];\n                        break;\n                    case 2:\n                        break;\n                    default:\n                        break;\n                }\n                switch (compareType) {\n                    case 'string':\n                        return valA.localeCompare(valB);\n                    case 'number':\n                        return valA - valB;\n                    case 'date':\n                        return new Date(valA).getTime() - new Date(valB).getTime();\n                    default:\n                        return 0;\n                }\n            };\n            let areas = [];\n            this.visSkiinfo[instance].data.favorites.forEach(favorite => {\n                const country = this.visSkiinfo[instance].data.skiinfodata.find(\n                    country =>\n                        country.code === favorite.country && country.areas.find(area => area.code === favorite.area),\n                );\n                if (country) {\n                    areas.push(country.areas.find(area => area.code === favorite.area));\n                }\n            });\n\n            areas.sort(compareFn).map(area => {\n                text += `   <tr>`;\n                text += `    <td class=\"txtl\"><span class=\"favorite selected\"  data-widgetid=\"${widgetID}\" data-country=\"${area.country}\" data-area=\"${area.code}\">&#x1F7CA;</span>${area.name}</td>`;\n                text += `    <td class=\"txtr\">${area.snowValley}</td>`;\n                text += `    <td class=\"txtr\">${area.snowMountain}</td>`;\n                text += `    <td class=\"txtr\">${area.freshSnow}</td>`;\n                text += `    <td class=\"txtr\">${area.liftsOpen}/${area.liftsAll}</td>`;\n                text += `    <td class=\"txtl\">${area.lastUpdate}</td>`;\n                text += `   </tr>`;\n            });\n            text += `  </table>`;\n            text += ` </div>`;\n            text += `</div>`;\n\n            $(`#${widgetID}`).html(text);\n            $(`.skiinfo.${widgetID} .tharea`).click(async function () {\n                await vis.binds['skiinfo'].favorites.onClickHeadArea(this);\n            });\n            $(`.skiinfo.${widgetID}.areas .favorite`).click(async function () {\n                await vis.binds['skiinfo'].favorites.onClickFavorite(this);\n            });\n        },\n        /**\n         * Event handler for clicking on a table header in the area list.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function toggles the sort order of the area list by the sort key\n         * that was clicked and then calls the render function to update the\n         * widget.\n         */\n        onClickHeadArea: async function (el) {\n            let sortkey = $(el).attr('data-sort');\n            let widgetID = $(el).attr('data-widgetid');\n            this.visSkiinfo.debug && console.log(`onClickHeadArea ${widgetID} ${sortkey}`);\n            vis.binds['skiinfo'].toggleSort(widgetID, sortkey);\n            this.render(widgetID);\n        },\n        /**\n         * Event handler for clicking on a favorite icon.\n         *\n         * @param el The HTML element that was clicked.\n         * @returns Promise\n         *\n         * This function toggles the favorite status of the clicked area and then\n         * calls the render function to update the widget.\n         */\n        onClickFavorite: async function (el) {\n            let widgetID = $(el).attr('data-widgetid');\n            let instance = this.visSkiinfo[widgetID].instance;\n            let country = $(el).attr('data-country');\n            let area = $(el).attr('data-area');\n            if (!this.visSkiinfo[instance].data.favorites) {\n                this.visSkiinfo[instance].data.favorites = [];\n            }\n            let index = this.visSkiinfo[instance].data.favorites.findIndex(\n                item => item.country == country && item.area == area,\n            );\n            if (index !== -1) {\n                this.visSkiinfo.debug && console.log(`onClickFavorite ${widgetID} ${country} ${area} fav deleted`);\n                this.visSkiinfo[instance].data = await this.visSkiinfo.delServerFavorite(\n                    this.visSkiinfo[widgetID].instance,\n                    country,\n                    area,\n                );\n            } else {\n                this.visSkiinfo.debug && console.log(`onClickFavorite ${widgetID} ${country} ${area} fav added`);\n                this.visSkiinfo[instance].data = await this.visSkiinfo.addServerFavorite(\n                    this.visSkiinfo[widgetID].instance,\n                    country,\n                    area,\n                );\n            }\n        },\n    },\n    /**\n     * Toggles the sort state for a specified column in the skiinfo widget.\n     *\n     * The function iterates through the sort states of all columns, resetting\n     * those not matching the provided sort key to their default state (0).\n     * The sort state of the specified sort key is then incremented in a cyclic\n     * manner through the states: 0 (default), 1 (ascending), and 2 (descending).\n     *\n     * @param widgetID - The ID of the widget whose sort state is being toggled.\n     * @param sortkey - The key representing the column to toggle the sort state for.\n     */\n    toggleSort: function (widgetID, sortkey) {\n        this.visSkiinfo.debug && console.log(`toggleSort ${widgetID} ${sortkey}`);\n        for (const item in vis.binds['skiinfo'][widgetID].sortState) {\n            if (item !== sortkey) {\n                vis.binds['skiinfo'][widgetID].sortState[item] = 0;\n            }\n        }\n        vis.binds['skiinfo'][widgetID].sortState[sortkey] = (vis.binds['skiinfo'][widgetID].sortState[sortkey] + 1) % 3;\n    },\n    /**\n     * Enables search mode in the skiinfo widget.\n     *\n     * Search mode is enabled by setting the 'search' property of the widget to\n     * an empty string.\n     *\n     * @param widgetID - The ID of the widget to enable search mode in.\n     */\n    enableSearch: function (widgetID) {\n        this.visSkiinfo.debug && console.log(`enableSearch ${widgetID}`);\n        vis.binds['skiinfo'][widgetID].search = '';\n    },\n    /**\n     * Disables search mode in the skiinfo widget.\n     *\n     * Search mode is disabled by deleting the 'search' property of the widget.\n     *\n     * @param widgetID - The ID of the widget to disable search mode in.\n     */\n    disableSearch: function (widgetID) {\n        this.visSkiinfo.debug && console.log(`disableSearch ${widgetID}`);\n        delete vis.binds['skiinfo'][widgetID].search;\n    },\n    toggleFilter: function (widgetID) {\n        this.visSkiinfo.debug && console.log(`toggleFilter ${widgetID}`);\n        vis.binds['skiinfo'][widgetID].filter = !vis.binds['skiinfo'][widgetID].filter;\n    },\n    /**\n     * Updates the search value of the skiinfo widget.\n     *\n     * The search value is used to filter the areas shown in the widget.\n     * The search is case-insensitive and searches for the value in the\n     * names of the areas.\n     *\n     * @param widgetID - The ID of the widget to update the search value of.\n     * @param value - The new search value.\n     */\n    doSearch: function (widgetID, value) {\n        this.visSkiinfo.debug && console.log(`doSearch ${widgetID}`);\n        vis.binds['skiinfo'][widgetID].search = value;\n    },\n    /**\n     * Sends a request to the server to fetch the current ski data for all countries, regions, and areas.\n     *\n     * @param instance - The instance ID of the adapter.\n     * @returns - A promise that resolves to the ski data.\n     */\n    getServerSkiData: async function (instance) {\n        this.visSkiinfo.debug && console.log(`getServerSkiData request`);\n        return await this.sendToAsync(instance, 'getServerSkiData', {});\n    },\n    /**\n     * Sends a request to the server to fetch the current ski data for a specific country.\n     *\n     * @param instance - The instance ID of the adapter.\n     * @param countrycode - The code of the country to fetch data for.\n     * @returns - A promise that resolves to the ski data.\n     */\n    getServerCountryData: async function (instance, countrycode) {\n        this.visSkiinfo.debug && console.log(`getServerCountryData request`);\n        return await this.sendToAsync(instance, 'getServerCountryData', {\n            countrycode: countrycode,\n        });\n    },\n    /**\n     * Sends a request to the server to fetch the current ski data for a specific region.\n     *\n     * @param instance - The instance ID of the adapter.\n     * @param countrycode - The code of the country to fetch data for.\n     * @param regioncode - The code of the region to fetch data for.\n     * @returns - A promise that resolves to the ski data.\n     */\n    getServerRegionData: async function (instance, countrycode, regioncode) {\n        this.visSkiinfo.debug && console.log(`getServerRegionData request`);\n        return await this.sendToAsync(instance, 'getServerRegionData', {\n            countrycode: countrycode,\n            regioncode: regioncode,\n        });\n    },\n    /**\n     * Sends a request to the server to add a favorite ski area.\n     *\n     * @param instance - The instance ID of the adapter.\n     * @param countrycode - The code of the country to add the favorite for.\n     * @param regioncode - The code of the region to add the favorite for.\n     * @param areacode - The code of the area to add as a favorite.\n     * @returns - A promise that resolves to the ski data.\n     */\n    addServerFavorite: async function (instance, countrycode, regioncode, areacode) {\n        this.visSkiinfo.debug && console.log(`addServerFavorite request`);\n        return await this.sendToAsync(instance, 'addServerFavorite', {\n            countrycode: countrycode,\n            regioncode: regioncode,\n            areacode: areacode,\n        });\n    },\n    /**\n     * Sends a request to the server to remove a favorite ski area.\n     *\n     * @param instance - The instance ID of the adapter.\n     * @param countrycode - The code of the country to remove the favorite for.\n     * @param regioncode - The code of the region to remove the favorite for.\n     * @param areacode - The code of the area to remove as a favorite.\n     * @returns - A promise that resolves to the ski data.\n     */\n    delServerFavorite: async function (instance, countrycode, regioncode, areacode) {\n        this.visSkiinfo.debug && console.log(`delServerFavorite request`);\n        return await this.sendToAsync(instance, 'delServerFavorite', {\n            countrycode: countrycode,\n            regioncode: regioncode,\n            areacode: areacode,\n        });\n    },\n    /**\n     * Sends a request to the server and returns a promise that resolves when the server responds.\n     *\n     * @param instance - The instance ID of the adapter.\n     * @param command - The command to send to the server.\n     * @param sendData - The data to send to the server.\n     * @returns - A promise that resolves to the response data.\n     */\n    sendToAsync: function (instance, command, sendData) {\n        this.visSkiinfo.debug && console.log(`sendToAsync ${command} ${JSON.stringify(sendData)}`);\n        return new Promise((resolve, reject) => {\n            try {\n                vis.conn.sendTo(instance, command, sendData, function (receiveData) {\n                    resolve(receiveData);\n                });\n            } catch (error) {\n                reject(error);\n            }\n        });\n    },\n    /**\n     * Extracts and returns the instance and skiinfo ID from a given object ID.\n     *\n     * This function splits the provided object ID (oid) into parts and forms\n     * two identifiers: the instance and the skiinfo ID. If the oid contains\n     * fewer than two parts, it returns [null, null].\n     *\n     * @param oid - The object ID to process, expected to be a string with dot-separated segments.\n     * @returns An array with two elements:\n     *          - The first element is the instance identifier formed by joining the first two parts.\n     *          - The second element is the skiinfo ID formed by joining the first three parts.\n     *          If the oid has fewer than two parts, returns [null, null].\n     */\n    getInstanceInfo: function (oid) {\n        this.visSkiinfo = vis.binds['skiinfo'];\n        this.visSkiinfo.debug && console.log('getInstanceInfo');\n        let idParts = oid.trim().split('.');\n        if (idParts.length < 2) {\n            return [null, null];\n        }\n        return [\n            idParts.slice(0, 2).join('.'), // instance\n            idParts.slice(0, 3).join('.'), // skiinfo id\n        ];\n    },\n};\n\nvis.binds['skiinfo'].showVersion();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,QACI,MAAQ;AAAA,UACJ,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,QAAU;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,MAAQ;AAAA,UACJ,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,KAAO;AAAA,UACH,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,MAAQ;AAAA,UACJ,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,KAAO;AAAA,UACH,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,MAAQ;AAAA,UACJ,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,KAAO;AAAA,UACH,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,aAAe;AAAA,UACX,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,QACA,KAAO;AAAA,UACH,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,IAAM;AAAA,UACN,SAAS;AAAA,QACb;AAAA,MACJ;AAAA;AAAA;;;ACjII,gBAAW;;;ACUf,MAAI,eAAe;AACnB,IAAE,OAAO,MAAM,kBAAkB,YAAY;AAG7C,MAAI,MAAM,SAAS,IAAI;AAAA,IACnB;AAAA,IACA,OAAO;AAAA,IACP,aAAa,WAAY;AACrB,UAAI,IAAI,MAAM,SAAS,EAAE,SAAS;AAC9B,gBAAQ,IAAI,oBAAoB,IAAI,MAAM,SAAS,EAAE,OAAO,EAAE;AAC9D,YAAI,MAAM,SAAS,EAAE,UAAU;AAAA,MACnC;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,YAAY;AAAA,MACR,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AAAA,IACA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaL,cAAc,SAAgB,UAAU,MAAM,MAAM,OAAO;AAAA;AACvD,cAAI,OAAO,EAAE,IAAI,QAAQ,EAAE;AAE3B,cAAI,CAAC,KAAK,QAAQ;AACd,mBAAO,WAAW,WAAY;AAC1B,kBAAI,MAAM,SAAS,EAAE,QAAQ,aAAa,UAAU,MAAM,MAAM,KAAK;AAAA,YACzE,GAAG,GAAG;AAAA,UACV;AACA,eAAK,aAAa,IAAI,MAAM,SAAS;AACrC,cAAI,CAAC,KAAK,eAAe,KAAK,eAAe,IAAI;AAC7C;AAAA,UACJ;AACA,cAAI,CAAC,UAAU,WAAW,IAAI,KAAK,WAAW,gBAAgB,KAAK,WAAW;AAC9E,cAAI,CAAC,eAAe,CAAC,UAAU;AAC3B;AAAA,UACJ;AAEA,eAAK,WAAW,SAAS,QAAQ,IAAI,WAAW;AAChD,cAAI,CAAC,KAAK,WAAW,QAAQ,GAAG;AAC5B,iBAAK,WAAW,QAAQ,IAAI;AAAA,cACxB,MAAM;AAAA,YACV;AAAA,UACJ;AACA,cAAI,CAAC,KAAK,WAAW,QAAQ,GAAG;AAC5B,iBAAK,WAAW,QAAQ,IAAI;AAAA;AAAA,cAExB,WAAW;AAAA,gBACP,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,OAAO;AAAA,gBACP,QAAQ;AAAA,gBACR,UAAU;AAAA,cACd;AAAA,cACA,QAAQ;AAAA,YACZ;AAAA,UACJ;AACA,eAAK,WAAW,QAAQ,EAAE,QAAQ;AAClC,eAAK,WAAW,QAAQ,EAAE,WAAW;AACrC,cAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,MAAM;AACjC,iBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW,iBAAiB,QAAQ;AAChF,gBAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,KAAK,WAAW;AAC3C,mBAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC;AAAA,YAChD;AAAA,UACJ;AACA,cAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,iBAAiB;AAC5C,kBAAM,KAAK,mBAAmB,QAAQ;AAAA,UAC1C;AACA,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQM,OAAO,UAAU;AAAA;AACnB,eAAK,WAAW,SAAS,QAAQ,IAAI,gBAAgB;AACrD,cAAI,WAAW,KAAK,WAAW,QAAQ,EAAE;AACzC,cAAI,gBAAgB,KAAK,WAAW,QAAQ,EAAE,MAAM,iBAAiB;AACrE,cAAI,OAAO;AACX,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ,aAAa,aAAa;AAAA;AAClC,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ,aAAa,aAAa;AAAA;AAClC,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ,YAAY,QAAQ,uBAAuB,QAAQ;AAAA;AAC3D,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ,iCAAiC,QAAQ;AAAA;AACrE,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ,mCAAmC,QAAQ;AAAA;AACvE,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ,kCAAkC,QAAQ;AAAA;AACtE,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,uBAAuB,QAAQ;AACvC,kBAAQ,wBAAwB,QAAQ;AACxC,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,qDAAqD,QAAQ,kCAAkC,EAAE,MAAM,CAAC,mCAAmC,KAAK,WAAW,QAAQ,EAAE,SAAS,aAAa,EAAE;AAErM,kBAAQ;AACR,cAAI,YAAY,KAAK,WAAW,QAAQ,EAAE,KAAK;AAC/C,oBAAU,IAAI,CAAAA,aAAW;AACrB,gBAAI,WAAWA,SAAQ,QAAQ,KAAK,WAAW,QAAQ,EAAE;AAEzD,gBAAI,UACA,KAAK,WAAW,QAAQ,EAAE,KAAK,UAAU,UAAU,UAAQ,KAAK,WAAWA,SAAQ,IAAI,KAAK,KACtF,QACA;AAEV,gBAAI,KAAK,WAAW,QAAQ,EAAE,UAAU,CAAC,SAAS;AAC9C;AAAA,YACJ;AACA,oBAAQ;AACR,oBAAQ;AAAA,8BACMA,SAAQ,IAAI;AAAA,kCACR,QAAQ;AAAA,mBACvB,WAAW,qBAAqB,EAAE;AAAA,mBAClCA,SAAQ,IAAI;AACf,oBAAQ;AAAA,UACZ,CAAC;AACD,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,wBAAwB,QAAQ;AACxC,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,WAAW,EAAE,QAAQ,CAAC;AAC9B,kBAAQ;AACR,cAAI,UAAU,UAAU,KAAK,OAAK,EAAE,QAAQ,KAAK,WAAW,QAAQ,EAAE,eAAe;AACrF,kBAAQ,QAAQ,IAAI,YAAU;AAC1B,gBAAI,WAAW,OAAO,QAAQ,KAAK,WAAW,QAAQ,EAAE;AAExD,gBAAI,UACA,KAAK,WAAW,QAAQ,EAAE,KAAK,UAAU;AAAA,cACrC,UAAQ,KAAK,WAAW,KAAK,WAAW,QAAQ,EAAE,mBAAmB,KAAK,UAAU,OAAO;AAAA,YAC/F,KAAK,KACC,QACA;AAEV,gBAAI,KAAK,WAAW,QAAQ,EAAE,UAAU,CAAC,SAAS;AAC9C;AAAA,YACJ;AACA,oBAAQ;AACR,oBAAQ;AAAA,8BACM,OAAO,IAAI;AAAA,kCACP,QAAQ;AAAA,iCACT,KAAK,WAAW,QAAQ,EAAE,eAAe;AAAA,mBACvD,WAAW,qBAAqB,EAAE;AAAA,mBAClC,OAAO,IAAI;AACd,oBAAQ;AAAA,UACZ,CAAC;AACD,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,wBAAwB,QAAQ;AACxC,kBAAQ;AACR,kBAAQ;AACR,cAAI,KAAK,WAAW,QAAQ,EAAE,WAAW,QAAW;AAChD,oBAAQ,uDAAuD,QAAQ,qFAAqF,EAAE,aAAa,CAAC,YAAY,KAAK,WAAW,QAAQ,EAAE,MAAM;AAAA,UAC5N,OAAO;AACH,oBAAQ,uDAAuD,QAAQ,qDAAqD,EAAE,MAAM,CAAC,kCAAkC,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,QAAQ,CAAC,CAAC;AAAA,UACpP;AACA,kBAAQ,uDAAuD,QAAQ,0BAA0B,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,UAAU,CAAC,CAAC;AACxL,kBAAQ,uDAAuD,QAAQ,4BAA4B,EAAE,MAAM,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,YAAY,CAAC,CAAC;AAC7L,kBAAQ,uDAAuD,QAAQ,uBAAuB,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,OAAO,CAAC,CAAC;AAClL,kBAAQ,uDAAuD,QAAQ,wBAAwB,EAAE,MAAM,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,QAAQ,CAAC,CAAC;AACrL,kBAAQ,uDAAuD,QAAQ,0BAA0B,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,UAAU,CAAC,CAAC;AACxL,kBAAQ;AAER,cAAI,UAAU;AACd,cAAI,UAAU;AACd,qBAAW,QAAQ,KAAK,WAAW,QAAQ,EAAE,WAAW;AACpD,gBAAI,KAAK,WAAW,QAAQ,EAAE,UAAU,IAAI,IAAI,GAAG;AAC/C,wBAAU;AACV,wBAAU,KAAK,WAAW,QAAQ,EAAE,UAAU,IAAI;AAAA,YACtD;AAAA,UACJ;AAaA,gBAAM,YAAY,CAAC,GAAG,MAAM;AACxB,gBAAI,MAAM,MAAM;AAChB,oBAAQ,SAAS;AAAA,cACb,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,oBAAI,EAAE,YAAY,GAAG;AACjB,yBAAO;AAAA,gBACX,OAAO;AACH,yBAAO,EAAE,WAAW,EAAE;AAAA,gBAC1B;AACA,oBAAI,EAAE,YAAY,GAAG;AACjB,yBAAO;AAAA,gBACX,OAAO;AACH,yBAAO,EAAE,WAAW,EAAE;AAAA,gBAC1B;AACA,iBAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI;AAC1B;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ;AACI,8BAAc;AACd;AAAA,YACR;AACA,oBAAQ,SAAS;AAAA,cACb,KAAK;AACD,iBAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI;AAC1B;AAAA,cACJ,KAAK;AACD;AAAA,cACJ;AACI;AAAA,YACR;AACA,oBAAQ,aAAa;AAAA,cACjB,KAAK;AACD,uBAAO,KAAK,cAAc,IAAI;AAAA,cAClC,KAAK;AACD,uBAAO,OAAO;AAAA,cAClB,KAAK;AACD,uBAAO,IAAI,KAAK,IAAI,EAAE,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE,QAAQ;AAAA,cAC7D;AACI,uBAAO;AAAA,YACf;AAAA,UACJ;AAEA,kBAAQ,MACH,OAAO,UAAQ;AACZ,gBAAI,aAAa,KAAK,UAAU,KAAK,WAAW,QAAQ,EAAE;AAC1D,gBAAI,WACA,KAAK,WAAW,QAAQ,EAAE,WAAW,SAC/B,KAAK,KAAK,YAAY,EAAE,SAAS,KAAK,WAAW,QAAQ,EAAE,OAAO,YAAY,CAAC,IAC/E;AACV,mBAAO,cAAc;AAAA,UACzB,CAAC,EACA,KAAK,SAAS,EACd,IAAI,UAAQ;AACT,gBAAI,WACA,KAAK,WAAW,QAAQ,EAAE,KAAK,UAAU;AAAA,cACrC,UAAQ,KAAK,WAAW,KAAK,WAAW,QAAQ,EAAE,mBAAmB,KAAK,QAAQ,KAAK;AAAA,YAC3F,KAAK,KACC,QACA;AACV,gBAAI,KAAK,WAAW,QAAQ,EAAE,UAAU,CAAC,UAAU;AAC/C;AAAA,YACJ;AACA,oBAAQ;AACR,oBAAQ,mDAAmD,WAAW,aAAa,EAAE,qBAAqB,QAAQ,mBAAmB,KAAK,OAAO,kBAAkB,KAAK,MAAM,gBAAgB,KAAK,IAAI,qBAAqB,KAAK,IAAI;AACrO,oBAAQ,wBAAwB,KAAK,UAAU;AAC/C,oBAAQ,wBAAwB,KAAK,YAAY;AACjD,oBAAQ,wBAAwB,KAAK,SAAS;AAC9C,oBAAQ,wBAAwB,KAAK,SAAS,IAAI,KAAK,QAAQ;AAC/D,oBAAQ,wBAAwB,KAAK,UAAU;AAC/C,oBAAQ;AAAA,UACZ,CAAC;AACL,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,YAAE,IAAI,QAAQ,EAAE,EAAE,KAAK,IAAI;AAC3B,YAAE,YAAY,QAAQ,oBAAoB,EAAE,GAAG,SAAS,WAAkB;AAAA;AACtE,oBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,eAAe,IAAI;AAAA,YAC1D;AAAA,WAAC;AACD,YAAE,YAAY,QAAQ,kBAAkB,EAAE,GAAG,SAAS,WAAkB;AAAA;AACpE,oBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,cAAc,IAAI;AAAA,YACzD;AAAA,WAAC;AACD,YAAE,YAAY,QAAQ,UAAU,EAAE,GAAG,SAAS,WAAkB;AAAA;AAC5D,oBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,gBAAgB,IAAI;AAAA,YAC3D;AAAA,WAAC;AACD,YAAE,YAAY,QAAQ,8BAA8B,EAAE,GAAG,SAAS,WAAkB;AAAA;AAChF,oBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,kBAAkB,IAAI;AAAA,YAC7D;AAAA,WAAC;AAED,YAAE,YAAY,QAAQ,kBAAkB,EAAE,GAAG,SAAS,WAAkB;AAAA;AACpE,oBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,gBAAgB,IAAI;AAAA,YAC3D;AAAA,WAAC;AACD,YAAE,YAAY,QAAQ,mCAAmC,EAAE,GAAG,SAAS,WAAkB;AAAA;AACrF,kBAAI,MAAM,SAAS,EAAE,QAAQ,uBAAuB,IAAI;AAAA,YAC5D;AAAA,WAAC;AAED,cAAI,KAAK,WAAW,QAAQ,EAAE,WAAW,QAAW;AAChD,cAAE,YAAY,QAAQ,mCAAmC,EAAE,GAAG,SAAS,WAAkB;AAAA;AACrF,sBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,mBAAmB,IAAI;AAAA,cAC9D;AAAA,aAAC;AACD,cAAE,YAAY,QAAQ,0BAA0B,EAAE,GAAG,UAAU,WAAkB;AAAA;AAC7E,sBAAM,IAAI,MAAM,SAAS,EAAE,QAAQ,gBAAgB,IAAI;AAAA,cAC3D;AAAA,aAAC;AACD,cAAE,YAAY,QAAQ,0BAA0B,EAAE,MAAM;AAAA,UAC5D;AAAA,QACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,gBAAgB,SAAgB,IAAI;AAAA;AAChC,cAAI,OAAO,EAAE,EAAE,EAAE,KAAK,WAAW;AACjC,cAAI,WAAW,EAAE,EAAE,EAAE,KAAK,eAAe;AACzC,eAAK,WAAW,SAAS,QAAQ,IAAI,kBAAkB,QAAQ,IAAI,IAAI,EAAE;AACzE,gBAAM,KAAK,mBAAmB,UAAU,IAAI;AAC5C,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,eAAe,SAAgB,IAAI;AAAA;AAC/B,cAAI,OAAO,EAAE,EAAE,EAAE,KAAK,WAAW;AACjC,cAAI,cAAc,EAAE,EAAE,EAAE,KAAK,cAAc;AAC3C,cAAI,WAAW,EAAE,EAAE,EAAE,KAAK,eAAe;AACzC,eAAK,WAAW,SAAS,QAAQ,IAAI,iBAAiB,QAAQ,IAAI,WAAW,IAAI,IAAI,EAAE;AACvF,gBAAM,KAAK,kBAAkB,UAAU,aAAa,IAAI;AACxD,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,iBAAiB,SAAgB,IAAI;AAAA;AACjC,cAAI,UAAU,EAAE,EAAE,EAAE,KAAK,WAAW;AACpC,cAAI,WAAW,EAAE,EAAE,EAAE,KAAK,eAAe;AACzC,cAAI,IAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAW;AACrD;AAAA,UACJ;AACA,eAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,IAAI,OAAO,EAAE;AAC7E,cAAI,MAAM,SAAS,EAAE,WAAW,UAAU,OAAO;AACjD,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,mBAAmB,SAAgB,IAAI;AAAA;AACnC,cAAI,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,eAAe;AAC3D,eAAK,WAAW,SAAS,QAAQ,IAAI,qBAAqB,QAAQ,EAAE;AACpE,cAAI,MAAM,SAAS,EAAE,aAAa,QAAQ;AAC1C,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA,MACA,wBAAwB,SAAgB,IAAI;AAAA;AACxC,cAAI,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,eAAe;AAC3D,eAAK,WAAW,SAAS,QAAQ,IAAI,0BAA0B,QAAQ,EAAE;AACzE,cAAI,MAAM,SAAS,EAAE,aAAa,QAAQ;AAC1C,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,oBAAoB,SAAgB,IAAI;AAAA;AACpC,cAAI,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,eAAe;AAC3D,eAAK,WAAW,SAAS,QAAQ,IAAI,sBAAsB,QAAQ,EAAE;AACrE,cAAI,MAAM,SAAS,EAAE,cAAc,QAAQ;AAC3C,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,iBAAiB,SAAgB,IAAI;AAAA;AACjC,cAAI,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,eAAe;AAC3D,eAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,EAAE;AAClE,cAAI,MAAM,SAAS,EAAE,SAAS,UAAU,EAAE,EAAE,EAAE,IAAI,CAAC;AACnD,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,iBAAiB,SAAgB,IAAI;AAAA;AACjC,cAAI,WAAW,EAAE,EAAE,EAAE,KAAK,eAAe;AACzC,cAAI,WAAW,KAAK,WAAW,QAAQ,EAAE;AACzC,cAAI,UAAU,EAAE,EAAE,EAAE,KAAK,cAAc;AACvC,cAAI,SAAS,EAAE,EAAE,EAAE,KAAK,aAAa;AACrC,cAAI,OAAO,EAAE,EAAE,EAAE,KAAK,WAAW;AACjC,cAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,KAAK,WAAW;AAC3C,iBAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC;AAAA,UAChD;AACA,cAAI,QAAQ,KAAK,WAAW,QAAQ,EAAE,KAAK,UAAU;AAAA,YACjD,UAAQ,KAAK,WAAW,WAAW,KAAK,QAAQ;AAAA,UACpD;AACA,cAAI,UAAU,IAAI;AACd,iBAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,IAAI,OAAO,IAAI,IAAI,cAAc;AACjG,iBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,cACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC1B;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AAAA,UACJ,OAAO;AACH,iBAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,IAAI,OAAO,IAAI,IAAI,YAAY;AAC/F,iBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,cACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC1B;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AAAA,UACJ;AACA,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYA,oBAAoB,SAAgB,UAAU,aAAa;AAAA;AACvD,cAAI,WAAW,KAAK,WAAW,QAAQ,EAAE;AACzC,eAAK,WAAW,SAAS,QAAQ,IAAI,sBAAsB,QAAQ,IAAI,WAAW,EAAE;AACpF,cAAI,aAAa;AACb,iBAAK,WAAW,QAAQ,EAAE,kBAAkB;AAC5C,gBAAI,UAAU,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,KAAK,CAAAA,aAAWA,SAAQ,QAAQ,WAAW;AAEpG,gBAAI,CAAC,WAAW,QAAQ,UAAU,OAAO;AACrC,mBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,gBACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,gBAC1B,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC9B;AAAA,YACJ;AACA,iBAAK,WAAW,QAAQ,EAAE,iBAAiB,QAAQ,QAAQ,CAAC,EAAE;AAAA,UAClE,OAAO;AACH,iBAAK,WAAW,QAAQ,EAAE,kBAAkB,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC,EAAE;AAC1F,iBAAK,WAAW,QAAQ,EAAE,iBACtB,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC,EAAE,QAAQ,CAAC,EAAE;AAAA,UACjE;AAAA,QACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeA,mBAAmB,SAAgB,UAAU,aAAa,YAAY;AAAA;AAClE,cAAI,SAAS;AACb,cAAI,WAAW,KAAK,WAAW,QAAQ,EAAE;AACzC,eAAK,WAAW,SAAS,QAAQ,IAAI,qBAAqB,QAAQ,IAAI,WAAW,IAAI,UAAU,EAAE;AACjG,cAAI,aAAa;AACb,sBAAU,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,KAAK,CAAAA,aAAWA,SAAQ,QAAQ,WAAW;AAEhG,gBAAI,CAAC,WAAW,QAAQ,UAAU,OAAO;AACrC,mBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,gBACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,gBAC1B,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC9B;AAAA,YACJ;AAAA,UACJ,OAAO;AACH,iBAAK,WAAW,QAAQ,EAAE,kBAAkB,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC,EAAE;AAAA,UAC9F;AACA,oBAAU,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,KAAK,CAAAA,aAAWA,SAAQ,QAAQ,WAAW;AAChG,cAAI,YAAY;AACZ,iBAAK,WAAW,QAAQ,EAAE,iBAAiB;AAE3C,qBAAS,QAAQ,QAAQ,KAAK,CAAAC,YAAUA,QAAO,QAAQ,UAAU;AAEjE,gBAAI,CAAC,UAAU,OAAO,UAAU,OAAO;AACnC,mBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,gBACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,gBAC1B,KAAK,WAAW,QAAQ,EAAE;AAAA,gBAC1B,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC9B;AAAA,YACJ;AAAA,UACJ,OAAO;AACH,iBAAK,WAAW,QAAQ,EAAE,iBAAiB,QAAQ,QAAQ,CAAC,EAAE;AAAA,UAClE;AAAA,QACJ;AAAA;AAAA,IACJ;AAAA,IACA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaP,cAAc,SAAgB,UAAU,MAAM,MAAM,OAAO;AAAA;AACvD,cAAI,OAAO,EAAE,IAAI,QAAQ,EAAE;AAE3B,cAAI,CAAC,KAAK,QAAQ;AACd,mBAAO,WAAW,WAAY;AAC1B,kBAAI,MAAM,SAAS,EAAE,UAAU,aAAa,UAAU,MAAM,MAAM,KAAK;AAAA,YAC3E,GAAG,GAAG;AAAA,UACV;AACA,eAAK,aAAa,IAAI,MAAM,SAAS;AACrC,cAAI,CAAC,KAAK,eAAe,KAAK,eAAe,IAAI;AAC7C;AAAA,UACJ;AACA,cAAI,CAAC,UAAU,WAAW,IAAI,KAAK,WAAW,gBAAgB,KAAK,WAAW;AAC9E,cAAI,CAAC,eAAe,CAAC,UAAU;AAC3B;AAAA,UACJ;AACA,cAAI,CAAC,KAAK,WAAW,QAAQ,GAAG;AAC5B,iBAAK,WAAW,QAAQ,IAAI;AAAA;AAAA,cAExB,WAAW;AAAA,gBACP,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,OAAO;AAAA,gBACP,QAAQ;AAAA,gBACR,UAAU;AAAA,cACd;AAAA,YACJ;AAAA,UACJ;AACA,eAAK,WAAW,QAAQ,EAAE,QAAQ;AAClC,eAAK,WAAW,QAAQ,EAAE,WAAW;AACrC,cAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,MAAM;AACjC,iBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW,iBAAiB,QAAQ;AAChF,gBAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,KAAK,WAAW;AAC3C,mBAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC;AAAA,YAChD;AAAA,UACJ;AACA,cAAI,SAAS,KAAK,aAAa,IAAI,KAAK,MAAM,IAAI,OAAO,KAAK,GAAG,KAAK,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;AAEhG,eAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,OAAO,aAAa,CAAC;AAShE,mBAAS,SAAS,GAAG,QAAuB;AACxC,gBAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,KAAK,YAAY,KAAK,MAAM,MAAM,EAAE;AACnE,gBAAI,MAAM,SAAS,EAAE,UAAU,OAAO,QAAQ;AAAA,UAClD;AACA,cAAI,KAAK,aAAa;AAClB,gBAAI,OAAO,KAAK,GAAG,KAAK,WAAW,QAAQ,QAAQ;AAEnD,iBAAK,KAAK,SAAS,CAAC,GAAG,KAAK,WAAW,MAAM,CAAC;AAE9C,iBAAK,KAAK,eAAe,QAAQ;AAAA,UACrC;AACA,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQM,OAAO,UAAU;AAAA;AACnB,eAAK,WAAW,SAAS,QAAQ,IAAI,oBAAoB,QAAQ,EAAE;AACnE,cAAI,WAAW,KAAK,WAAW,QAAQ,EAAE;AACzC,cAAI,gBAAgB,KAAK,WAAW,QAAQ,EAAE,MAAM,iBAAiB;AACrE,cAAI,OAAO;AACX,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ,aAAa,aAAa;AAAA;AAElC,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ,YAAY,QAAQ,uBAAuB,QAAQ;AAAA;AAC3D,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ;AAAA;AAC5B,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,YAAY,QAAQ,mCAAmC,QAAQ;AAAA;AACvE,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,YAAY,QAAQ,kCAAkC,QAAQ;AAAA;AACtE,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,kBAAQ,uBAAuB,QAAQ;AACvC,kBAAQ,wBAAwB,QAAQ;AAExC,kBAAQ;AACR,kBAAQ;AACR,kBAAQ,gDAAgD,QAAQ,wBAAwB,EAAE,MAAM,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,QAAQ,CAAC,CAAC;AAC9K,kBAAQ,gDAAgD,QAAQ,0BAA0B,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,UAAU,CAAC,CAAC;AACjL,kBAAQ,gDAAgD,QAAQ,4BAA4B,EAAE,MAAM,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,YAAY,CAAC,CAAC;AACtL,kBAAQ,gDAAgD,QAAQ,uBAAuB,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,OAAO,CAAC,CAAC;AAC3K,kBAAQ,gDAAgD,QAAQ,wBAAwB,EAAE,MAAM,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,QAAQ,CAAC,CAAC;AAC9K,kBAAQ,gDAAgD,QAAQ,0BAA0B,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW,WAAW,KAAK,WAAW,QAAQ,EAAE,UAAU,UAAU,CAAC,CAAC;AACjL,kBAAQ;AAER,cAAI,UAAU;AACd,cAAI,UAAU;AACd,qBAAW,QAAQ,KAAK,WAAW,QAAQ,EAAE,WAAW;AACpD,gBAAI,KAAK,WAAW,QAAQ,EAAE,UAAU,IAAI,IAAI,GAAG;AAC/C,wBAAU;AACV,wBAAU,KAAK,WAAW,QAAQ,EAAE,UAAU,IAAI;AAAA,YACtD;AAAA,UACJ;AAQA,gBAAM,YAAY,CAAC,GAAG,MAAM;AACxB,gBAAI,MAAM,MAAM;AAChB,oBAAQ,SAAS;AAAA,cACb,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,oBAAI,EAAE,YAAY,GAAG;AACjB,yBAAO;AAAA,gBACX,OAAO;AACH,yBAAO,EAAE,WAAW,EAAE;AAAA,gBAC1B;AACA,oBAAI,EAAE,YAAY,GAAG;AACjB,yBAAO;AAAA,gBACX,OAAO;AACH,yBAAO,EAAE,WAAW,EAAE;AAAA,gBAC1B;AACA,iBAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI;AAC1B;AAAA,cACJ,KAAK;AACD,8BAAc;AACd,uBAAO,EAAE;AACT,uBAAO,EAAE;AACT;AAAA,cACJ;AACI,8BAAc;AACd;AAAA,YACR;AACA,oBAAQ,SAAS;AAAA,cACb,KAAK;AACD,iBAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI;AAC1B;AAAA,cACJ,KAAK;AACD;AAAA,cACJ;AACI;AAAA,YACR;AACA,oBAAQ,aAAa;AAAA,cACjB,KAAK;AACD,uBAAO,KAAK,cAAc,IAAI;AAAA,cAClC,KAAK;AACD,uBAAO,OAAO;AAAA,cAClB,KAAK;AACD,uBAAO,IAAI,KAAK,IAAI,EAAE,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE,QAAQ;AAAA,cAC7D;AACI,uBAAO;AAAA,YACf;AAAA,UACJ;AACA,cAAI,QAAQ,CAAC;AACb,eAAK,WAAW,QAAQ,EAAE,KAAK,UAAU,QAAQ,cAAY;AACzD,kBAAM,UAAU,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAY;AAAA,cACvD,CAAAD,aACIA,SAAQ,SAAS,SAAS,WAAWA,SAAQ,MAAM,KAAK,UAAQ,KAAK,SAAS,SAAS,IAAI;AAAA,YACnG;AACA,gBAAI,SAAS;AACT,oBAAM,KAAK,QAAQ,MAAM,KAAK,UAAQ,KAAK,SAAS,SAAS,IAAI,CAAC;AAAA,YACtE;AAAA,UACJ,CAAC;AAED,gBAAM,KAAK,SAAS,EAAE,IAAI,UAAQ;AAC9B,oBAAQ;AACR,oBAAQ,wEAAwE,QAAQ,mBAAmB,KAAK,OAAO,gBAAgB,KAAK,IAAI,qBAAqB,KAAK,IAAI;AAC9K,oBAAQ,wBAAwB,KAAK,UAAU;AAC/C,oBAAQ,wBAAwB,KAAK,YAAY;AACjD,oBAAQ,wBAAwB,KAAK,SAAS;AAC9C,oBAAQ,wBAAwB,KAAK,SAAS,IAAI,KAAK,QAAQ;AAC/D,oBAAQ,wBAAwB,KAAK,UAAU;AAC/C,oBAAQ;AAAA,UACZ,CAAC;AACD,kBAAQ;AACR,kBAAQ;AACR,kBAAQ;AAER,YAAE,IAAI,QAAQ,EAAE,EAAE,KAAK,IAAI;AAC3B,YAAE,YAAY,QAAQ,UAAU,EAAE,MAAM,WAAkB;AAAA;AACtD,oBAAM,IAAI,MAAM,SAAS,EAAE,UAAU,gBAAgB,IAAI;AAAA,YAC7D;AAAA,WAAC;AACD,YAAE,YAAY,QAAQ,kBAAkB,EAAE,MAAM,WAAkB;AAAA;AAC9D,oBAAM,IAAI,MAAM,SAAS,EAAE,UAAU,gBAAgB,IAAI;AAAA,YAC7D;AAAA,WAAC;AAAA,QACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,iBAAiB,SAAgB,IAAI;AAAA;AACjC,cAAI,UAAU,EAAE,EAAE,EAAE,KAAK,WAAW;AACpC,cAAI,WAAW,EAAE,EAAE,EAAE,KAAK,eAAe;AACzC,eAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,IAAI,OAAO,EAAE;AAC7E,cAAI,MAAM,SAAS,EAAE,WAAW,UAAU,OAAO;AACjD,eAAK,OAAO,QAAQ;AAAA,QACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,iBAAiB,SAAgB,IAAI;AAAA;AACjC,cAAI,WAAW,EAAE,EAAE,EAAE,KAAK,eAAe;AACzC,cAAI,WAAW,KAAK,WAAW,QAAQ,EAAE;AACzC,cAAI,UAAU,EAAE,EAAE,EAAE,KAAK,cAAc;AACvC,cAAI,OAAO,EAAE,EAAE,EAAE,KAAK,WAAW;AACjC,cAAI,CAAC,KAAK,WAAW,QAAQ,EAAE,KAAK,WAAW;AAC3C,iBAAK,WAAW,QAAQ,EAAE,KAAK,YAAY,CAAC;AAAA,UAChD;AACA,cAAI,QAAQ,KAAK,WAAW,QAAQ,EAAE,KAAK,UAAU;AAAA,YACjD,UAAQ,KAAK,WAAW,WAAW,KAAK,QAAQ;AAAA,UACpD;AACA,cAAI,UAAU,IAAI;AACd,iBAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,IAAI,OAAO,IAAI,IAAI,cAAc;AACjG,iBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,cACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC1B;AAAA,cACA;AAAA,YACJ;AAAA,UACJ,OAAO;AACH,iBAAK,WAAW,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,IAAI,OAAO,IAAI,IAAI,YAAY;AAC/F,iBAAK,WAAW,QAAQ,EAAE,OAAO,MAAM,KAAK,WAAW;AAAA,cACnD,KAAK,WAAW,QAAQ,EAAE;AAAA,cAC1B;AAAA,cACA;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,YAAY,SAAU,UAAU,SAAS;AACrC,WAAK,WAAW,SAAS,QAAQ,IAAI,cAAc,QAAQ,IAAI,OAAO,EAAE;AACxE,iBAAW,QAAQ,IAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,WAAW;AACzD,YAAI,SAAS,SAAS;AAClB,cAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,UAAU,IAAI,IAAI;AAAA,QACrD;AAAA,MACJ;AACA,UAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,UAAU,OAAO,KAAK,IAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,UAAU,OAAO,IAAI,KAAK;AAAA,IAClH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,cAAc,SAAU,UAAU;AAC9B,WAAK,WAAW,SAAS,QAAQ,IAAI,gBAAgB,QAAQ,EAAE;AAC/D,UAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,eAAe,SAAU,UAAU;AAC/B,WAAK,WAAW,SAAS,QAAQ,IAAI,iBAAiB,QAAQ,EAAE;AAChE,aAAO,IAAI,MAAM,SAAS,EAAE,QAAQ,EAAE;AAAA,IAC1C;AAAA,IACA,cAAc,SAAU,UAAU;AAC9B,WAAK,WAAW,SAAS,QAAQ,IAAI,gBAAgB,QAAQ,EAAE;AAC/D,UAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,MAAM,SAAS,EAAE,QAAQ,EAAE;AAAA,IAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,UAAU,SAAU,UAAU,OAAO;AACjC,WAAK,WAAW,SAAS,QAAQ,IAAI,YAAY,QAAQ,EAAE;AAC3D,UAAI,MAAM,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,kBAAkB,SAAgB,UAAU;AAAA;AACxC,aAAK,WAAW,SAAS,QAAQ,IAAI,0BAA0B;AAC/D,eAAO,MAAM,KAAK,YAAY,UAAU,oBAAoB,CAAC,CAAC;AAAA,MAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,sBAAsB,SAAgB,UAAU,aAAa;AAAA;AACzD,aAAK,WAAW,SAAS,QAAQ,IAAI,8BAA8B;AACnE,eAAO,MAAM,KAAK,YAAY,UAAU,wBAAwB;AAAA,UAC5D;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,qBAAqB,SAAgB,UAAU,aAAa,YAAY;AAAA;AACpE,aAAK,WAAW,SAAS,QAAQ,IAAI,6BAA6B;AAClE,eAAO,MAAM,KAAK,YAAY,UAAU,uBAAuB;AAAA,UAC3D;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,mBAAmB,SAAgB,UAAU,aAAa,YAAY,UAAU;AAAA;AAC5E,aAAK,WAAW,SAAS,QAAQ,IAAI,2BAA2B;AAChE,eAAO,MAAM,KAAK,YAAY,UAAU,qBAAqB;AAAA,UACzD;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,mBAAmB,SAAgB,UAAU,aAAa,YAAY,UAAU;AAAA;AAC5E,aAAK,WAAW,SAAS,QAAQ,IAAI,2BAA2B;AAChE,eAAO,MAAM,KAAK,YAAY,UAAU,qBAAqB;AAAA,UACzD;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,aAAa,SAAU,UAAU,SAAS,UAAU;AAChD,WAAK,WAAW,SAAS,QAAQ,IAAI,eAAe,OAAO,IAAI,KAAK,UAAU,QAAQ,CAAC,EAAE;AACzF,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,YAAI;AACA,cAAI,KAAK,OAAO,UAAU,SAAS,UAAU,SAAU,aAAa;AAChE,oBAAQ,WAAW;AAAA,UACvB,CAAC;AAAA,QACL,SAAS,OAAO;AACZ,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,iBAAiB,SAAU,KAAK;AAC5B,WAAK,aAAa,IAAI,MAAM,SAAS;AACrC,WAAK,WAAW,SAAS,QAAQ,IAAI,iBAAiB;AACtD,UAAI,UAAU,IAAI,KAAK,EAAE,MAAM,GAAG;AAClC,UAAI,QAAQ,SAAS,GAAG;AACpB,eAAO,CAAC,MAAM,IAAI;AAAA,MACtB;AACA,aAAO;AAAA,QACH,QAAQ,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AAAA;AAAA,QAC5B,QAAQ,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AAAA;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,MAAM,SAAS,EAAE,YAAY;",
  "names": ["country", "region"]
}
